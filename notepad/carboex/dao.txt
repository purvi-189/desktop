const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Dao", function () {
  let dao;
  let company;
  let token;
  let owner;
  let user1;
  let user2;

  const proposalstake = ethers.utils.parseEther("0.0001");
  const votingstake = ethers.utils.parseEther("0.00001");
  const votingtimeperiod = 300;
  const votingPercent = 20;
  const globallimit = 1000;

  beforeEach(async function () {
    [owner, user1, user2] = await ethers.getSigners();

    const Company = await ethers.getContractFactory("Company");
    company = await Company.deploy();
    await company.deployed();

    const Token = await ethers.getContractFactory("NewToken");
    token = await Token.deploy(10000);
    await token.deployed();

    const Dao = await ethers.getContractFactory("Dao");
    dao = await Dao.deploy(company.address, token.address);
    await dao.deployed();
  });

  it("should create a proposal", async function () {
    await token.connect(user1).addMember(100);

    await expect(
      dao.connect(user1).createProposal(
        "Proposal Description",
        "Proposal Image",
        false,
        50
      )
    )
      .to.emit(dao, "CreateProposal")
      .withArgs(1, user1.address);

    const proposal = await dao.getProposal(1);
    expect(proposal.description).to.equal("Proposal Description");
    expect(proposal.creator).to.equal(user1.address);
  });

  it("should get all proposals", async function () {
    await token.connect(user1).addMember(100);
    await dao.connect(user1).createProposal(
      "Proposal 1",
      "Image 1",
      false,
      50
    );
    await dao.connect(user1).createProposal(
      "Proposal 2",
      "Image 2",
      true,
      30
    );

    const proposals = await dao.getAllProposal();
    expect(proposals.length).to.equal(2);
    expect(proposals[0].description).to.equal("Proposal 1");
    expect(proposals[1].description).to.equal("Proposal 2");
  });

  it("should get user proposals", async function () {
    await token.connect(user1).addMember(100);
    await dao.connect(user1).createProposal(
      "Proposal 1",
      "Image 1",
      false,
      50
    );
    await dao.connect(user1).createProposal(
      "Proposal 2",
      "Image 2",
      true,
      30
    );

    const user1Proposals = await dao.getUserProposals(user1.address);
    expect(user1Proposals.length).to.equal(2);
    expect(user1Proposals[0]).to.equal(1);
    expect(user1Proposals[1]).to.equal(2);
  });

  it("should add a member", async function () {
    const tokenPrice = await token.gettokenPrice();
    const amount = 100;
    const payment = amount * tokenPrice;

    await expect(token.connect(user1).addMember(amount, { value: payment }))
      .to.emit(dao, "AddMember")
      .withArgs(user1.address, amount);

    expect(await dao.isMember(user1.address)).to.be.true;
    expect(await token.balanceOf(user1.address)).to.equal(amount);
  });


  it("should upvote a proposal", async function () {
    await token.connect(user1).addMember(100);
    await token.connect(user2).addMember(100);
    await dao.connect(user1).createProposal(
      "Proposal Description",
      "Proposal Image",
      false,
      50
    );

    await expect(dao.connect(user2).upvote(1, { value: votingstake }))
      .to.emit(dao, "Upvote")	
      .withArgs(1, user2.address);

    const proposal = await dao.getProposal(1);
    expect(proposal.upvote).to.equal(1);
    expect(proposal.upvoters.length).to.equal(1);
    expect(proposal.upvoters[0]).to.equal(user2.address);
  });

  it("should downvote a proposal", async function () {
    await token.connect(user1).addMember(100);
    await token.connect(user2).addMember(100);
    await dao.connect(user1).createProposal(
      "Proposal Description",
      "Proposal Image",
      false,
      50
    );

    await expect(dao.connect(user2).downvote(1, { value: votingstake }))
      .to.emit(dao, "Downvote")
      .withArgs(1, user2.address);

    const proposal = await dao.getProposal(1);
    expect(proposal.downvote).to.equal(1);
    expect(proposal.downvoters.length).to.equal(1);
    expect(proposal.downvoters[0]).to.equal(user2.address);
  });

  it("should get the proposal result", async function () {
    await token.connect(user1).addMember(100);
    await dao.connect(user1).createProposal(
      "Proposal Description",
      "Proposal Image",
      false,
      50
    );

    // Upvote proposal
    await dao.connect(user2).upvote(1, { value: votingstake });

    // End voting time
    await ethers.provider.send("evm_increaseTime", [votingtimeperiod]);
    await ethers.provider.send("evm_mine");

    await expect(dao.getProposalResult(1))
      .to.emit(dao, "ProposalResult")
      .withArgs(1, "accept");

    const proposal = await dao.getProposal(1);
    expect(proposal.status).to.equal("accept");
  });

  it("should set proposal stake", async function () {
    const newProposalStake = ethers.utils.parseEther("0.0002");

    await expect(dao.setproposalstake(newProposalStake))
      .to.emit(dao, "ProposalStakeSet")
      .withArgs(newProposalStake);

    expect(await dao.proposalstake()).to.equal(newProposalStake);
  });

  it("should set voting stake", async function () {
    const newVotingStake = ethers.utils.parseEther("0.00002");

    await expect(dao.setvotingstake(newVotingStake))
      .to.emit(dao, "VotingStakeSet")
      .withArgs(newVotingStake);

    expect(await dao.votingstake()).to.equal(newVotingStake);
  });

  it("should set voting time period", async function () {
    const newVotingTimePeriod = 600;

    await expect(dao.setvotingtimeperiod(newVotingTimePeriod))
      .to.emit(dao, "VotingTimePeriodSet")
      .withArgs(newVotingTimePeriod);

    expect(await dao.votingtimeperiod()).to.equal(newVotingTimePeriod);
  });

  it("should set voting percent", async function () {
    const newVotingPercent = 30;

    await expect(dao.setvotingpercent(newVotingPercent))
      .to.emit(dao, "VotingPercentSet")
      .withArgs(newVotingPercent);

    expect(await dao.votingpercent()).to.equal(newVotingPercent);
  });

  it("should set global limit", async function () {
    const newGlobalLimit = 2000;

    await expect(dao.setgloballimit(newGlobalLimit))
      .to.emit(dao, "GlobalLimitSet")
      .withArgs(newGlobalLimit);

    expect(await dao.globallimit()).to.equal(newGlobalLimit);
  });
});