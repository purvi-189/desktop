import * as metamaskSigUtil from '@metamask/eth-sig-util';
import { ENV } from '../constants';
import { SignerType, walletType, encryptedPrivateKeyType, encryptedPrivateKeyTypeV2, IMessageIPFS, ProgressHookType } from '../types';
/** DEPRECATED */
export declare const getPublicKey: (options: walletType) => Promise<string>;
/** DEPRECATED */
export declare const encryptV1: (text: string, encryptionPublicKey: string, version: string) => metamaskSigUtil.EthEncryptedData;
/** DEPRECATED */
export declare const decryptWithWalletRPCMethod: (encryptedPGPPrivateKey: string, account: string) => Promise<any>;
declare type decryptPgpKeyProps = {
    encryptedPGPPrivateKey: string;
    account?: string;
    signer?: SignerType | null;
    env?: ENV;
    toUpgrade?: boolean;
    additionalMeta?: {
        NFTPGP_V1?: {
            password: string;
        };
    };
    progressHook?: (progress: ProgressHookType) => void;
};
export declare const decryptPGPKey: (options: decryptPgpKeyProps) => Promise<any>;
export declare const decryptMessage: ({ encryptedPGPPrivateKey, encryptionType, encryptedSecret, pgpPrivateKey, signature, signatureValidationPubliKey, message, }: {
    encryptedPGPPrivateKey: string;
    encryptionType: string;
    encryptedSecret: string;
    pgpPrivateKey: string;
    signature: string;
    signatureValidationPubliKey: string;
    message: IMessageIPFS;
}) => Promise<string>;
export declare const decryptAndVerifySignature: ({ cipherText, encryptedSecretKey, publicKeyArmored, signatureArmored, privateKeyArmored, message, }: {
    cipherText: string;
    encryptedSecretKey: string;
    publicKeyArmored: string;
    signatureArmored: string;
    privateKeyArmored: string;
    message: IMessageIPFS;
}) => Promise<string>;
export declare const generateHash: (message: any) => string;
export declare const hexToBytes: (hex: string) => Uint8Array;
export declare const stringToHex: (str: string) => string;
/** AES-GCM Encryption */
export declare const encryptV2: (data: Uint8Array, secret: Uint8Array, additionalData?: Uint8Array | undefined) => Promise<encryptedPrivateKeyTypeV2>;
/** AES-GCM Decryption */
export declare const decryptV2: (encryptedData: encryptedPrivateKeyTypeV2, secret: Uint8Array, additionalData?: Uint8Array | undefined) => Promise<Uint8Array>;
export declare const encryptPGPKey: (encryptionType: string, privateKey: string, wallet: walletType, additionalMeta?: {
    NFTPGP_V1?: {
        password: string;
    } | undefined;
} | undefined) => Promise<encryptedPrivateKeyType>;
export declare const preparePGPPublicKey: (encryptionType: string, publicKey: string, wallet: walletType) => Promise<string>;
export declare const verifyPGPPublicKey: (encryptedPrivateKey: string, publicKey: string, did: string) => string;
export declare const validatePssword: (password: string) => void;
export {};
