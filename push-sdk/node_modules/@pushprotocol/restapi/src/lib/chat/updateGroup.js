"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateGroup = void 0;
const tslib_1 = require("tslib");
const axios_1 = require("axios");
const helpers_1 = require("../helpers");
const constants_1 = require("../constants");
const helpers_2 = require("./helpers");
const CryptoJS = require("crypto-js");
/**
 * Update Group information
 */
const updateGroup = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { chatId, groupName, groupImage, groupDescription, members, admins, account = null, signer = null, env = constants_1.default.ENV.PROD, pgpPrivateKey = null, } = options || {};
    try {
        if (account == null && signer == null) {
            throw new Error(`At least one from account or signer is necessary!`);
        }
        const wallet = (0, helpers_2.getWallet)({ account, signer });
        const address = yield (0, helpers_2.getAccountAddress)(wallet);
        (0, helpers_2.updateGroupRequestValidator)(chatId, groupName, groupDescription, groupImage, members, admins, address);
        const connectedUser = yield (0, helpers_2.getConnectedUserV2)(wallet, pgpPrivateKey, env);
        const convertedMembersPromise = members.map((each) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            return (0, helpers_2.getUserDID)(each, env);
        }));
        const convertedAdminsPromise = admins.map((each) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            return (0, helpers_2.getUserDID)(each, env);
        }));
        const convertedMembers = yield Promise.all(convertedMembersPromise);
        const convertedAdmins = yield Promise.all(convertedAdminsPromise);
        const bodyToBeHashed = {
            groupName: groupName,
            groupDescription: groupDescription,
            groupImage: groupImage,
            members: convertedMembers,
            admins: convertedAdmins,
            chatId: chatId,
        };
        const hash = CryptoJS.SHA256(JSON.stringify(bodyToBeHashed)).toString();
        const signature = yield (0, helpers_2.sign)({
            message: hash,
            signingKey: connectedUser.privateKey,
        });
        const sigType = 'pgp';
        const verificationProof = sigType + ':' + signature + ':' + account;
        const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
        const apiEndpoint = `${API_BASE_URL}/v1/chat/groups/${chatId}`;
        const body = (0, helpers_2.updateGroupPayload)(groupName, groupImage, groupDescription, convertedMembers, convertedAdmins, connectedUser.did, verificationProof);
        return axios_1.default
            .put(apiEndpoint, body)
            .then((response) => {
            return response.data;
        })
            .catch((err) => {
            var _a, _b;
            if ((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.data)
                throw new Error((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data);
            throw new Error(err);
        });
    }
    catch (err) {
        console.error(`[Push SDK] - API  - Error - API ${exports.updateGroup.name} -:  `, err);
        throw Error(`[Push SDK] - API  - Error - API ${exports.updateGroup.name} -: ${err}`);
    }
});
exports.updateGroup = updateGroup;
//# sourceMappingURL=updateGroup.js.map